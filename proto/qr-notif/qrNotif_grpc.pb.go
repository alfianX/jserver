// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.22.0
// source: proto/qr-notif/qrNotif.proto

package qr_notif

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QrNotifService_Status_FullMethodName = "/qrNotif.QrNotifService/Status"
)

// QrNotifServiceClient is the client API for QrNotifService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QrNotifServiceClient interface {
	Status(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*structpb.Struct, error)
}

type qrNotifServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQrNotifServiceClient(cc grpc.ClientConnInterface) QrNotifServiceClient {
	return &qrNotifServiceClient{cc}
}

func (c *qrNotifServiceClient) Status(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*structpb.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, QrNotifService_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QrNotifServiceServer is the server API for QrNotifService service.
// All implementations must embed UnimplementedQrNotifServiceServer
// for forward compatibility.
type QrNotifServiceServer interface {
	Status(context.Context, *structpb.Struct) (*structpb.Struct, error)
	mustEmbedUnimplementedQrNotifServiceServer()
}

// UnimplementedQrNotifServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQrNotifServiceServer struct{}

func (UnimplementedQrNotifServiceServer) Status(context.Context, *structpb.Struct) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedQrNotifServiceServer) mustEmbedUnimplementedQrNotifServiceServer() {}
func (UnimplementedQrNotifServiceServer) testEmbeddedByValue()                        {}

// UnsafeQrNotifServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QrNotifServiceServer will
// result in compilation errors.
type UnsafeQrNotifServiceServer interface {
	mustEmbedUnimplementedQrNotifServiceServer()
}

func RegisterQrNotifServiceServer(s grpc.ServiceRegistrar, srv QrNotifServiceServer) {
	// If the following call pancis, it indicates UnimplementedQrNotifServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QrNotifService_ServiceDesc, srv)
}

func _QrNotifService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(structpb.Struct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QrNotifServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QrNotifService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QrNotifServiceServer).Status(ctx, req.(*structpb.Struct))
	}
	return interceptor(ctx, in, info, handler)
}

// QrNotifService_ServiceDesc is the grpc.ServiceDesc for QrNotifService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QrNotifService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qrNotif.QrNotifService",
	HandlerType: (*QrNotifServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _QrNotifService_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/qr-notif/qrNotif.proto",
}

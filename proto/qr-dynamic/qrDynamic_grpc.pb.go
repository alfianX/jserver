// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.22.0
// source: proto/qr-dynamic/qrDynamic.proto

package qr_dynamic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QrDynamicService_Status_FullMethodName     = "/qrDynamic.QrDynamicService/Status"
	QrDynamicService_GenerateQr_FullMethodName = "/qrDynamic.QrDynamicService/GenerateQr"
	QrDynamicService_Query_FullMethodName      = "/qrDynamic.QrDynamicService/Query"
)

// QrDynamicServiceClient is the client API for QrDynamicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QrDynamicServiceClient interface {
	Status(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*structpb.Struct, error)
	GenerateQr(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*structpb.Struct, error)
	Query(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*structpb.Struct, error)
}

type qrDynamicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQrDynamicServiceClient(cc grpc.ClientConnInterface) QrDynamicServiceClient {
	return &qrDynamicServiceClient{cc}
}

func (c *qrDynamicServiceClient) Status(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*structpb.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, QrDynamicService_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qrDynamicServiceClient) GenerateQr(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*structpb.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, QrDynamicService_GenerateQr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qrDynamicServiceClient) Query(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*structpb.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, QrDynamicService_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QrDynamicServiceServer is the server API for QrDynamicService service.
// All implementations must embed UnimplementedQrDynamicServiceServer
// for forward compatibility.
type QrDynamicServiceServer interface {
	Status(context.Context, *structpb.Struct) (*structpb.Struct, error)
	GenerateQr(context.Context, *structpb.Struct) (*structpb.Struct, error)
	Query(context.Context, *structpb.Struct) (*structpb.Struct, error)
	mustEmbedUnimplementedQrDynamicServiceServer()
}

// UnimplementedQrDynamicServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQrDynamicServiceServer struct{}

func (UnimplementedQrDynamicServiceServer) Status(context.Context, *structpb.Struct) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedQrDynamicServiceServer) GenerateQr(context.Context, *structpb.Struct) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateQr not implemented")
}
func (UnimplementedQrDynamicServiceServer) Query(context.Context, *structpb.Struct) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedQrDynamicServiceServer) mustEmbedUnimplementedQrDynamicServiceServer() {}
func (UnimplementedQrDynamicServiceServer) testEmbeddedByValue()                          {}

// UnsafeQrDynamicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QrDynamicServiceServer will
// result in compilation errors.
type UnsafeQrDynamicServiceServer interface {
	mustEmbedUnimplementedQrDynamicServiceServer()
}

func RegisterQrDynamicServiceServer(s grpc.ServiceRegistrar, srv QrDynamicServiceServer) {
	// If the following call pancis, it indicates UnimplementedQrDynamicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QrDynamicService_ServiceDesc, srv)
}

func _QrDynamicService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(structpb.Struct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QrDynamicServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QrDynamicService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QrDynamicServiceServer).Status(ctx, req.(*structpb.Struct))
	}
	return interceptor(ctx, in, info, handler)
}

func _QrDynamicService_GenerateQr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(structpb.Struct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QrDynamicServiceServer).GenerateQr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QrDynamicService_GenerateQr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QrDynamicServiceServer).GenerateQr(ctx, req.(*structpb.Struct))
	}
	return interceptor(ctx, in, info, handler)
}

func _QrDynamicService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(structpb.Struct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QrDynamicServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QrDynamicService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QrDynamicServiceServer).Query(ctx, req.(*structpb.Struct))
	}
	return interceptor(ctx, in, info, handler)
}

// QrDynamicService_ServiceDesc is the grpc.ServiceDesc for QrDynamicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QrDynamicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qrDynamic.QrDynamicService",
	HandlerType: (*QrDynamicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _QrDynamicService_Status_Handler,
		},
		{
			MethodName: "GenerateQr",
			Handler:    _QrDynamicService_GenerateQr_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _QrDynamicService_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/qr-dynamic/qrDynamic.proto",
}
